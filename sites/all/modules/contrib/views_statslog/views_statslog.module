<?php
/**
 * Views Statslog
 *
 * Log statistical information generated by views to watchdog.
 */

/**
 * Return the proper elasticsearch type for an aggregation function.
 */
function _views_statslog_result_type($aggregation) {
  $types = array(
    "count" => "integer",
    "count_distinct" => "integer",
    "sum" => "float",
    "avg" => "float",
    "min" => "float",
    "max" => "float",
    "stddev_pop" => "float",
  );
  return $types[$aggregation];
}

/**
 * Implements hook_menu().
 */
function views_statslog_menu() {
  $items = array();

  $items['admin/reports/views_statslog'] = array(
    'title' => 'Views Statslog',
    'description' => 'Log results of views periodically to watchdog.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_statslog_configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  if (module_exists('devel')) {
    $items['admin/reports/views_statslog/debug'] = array(
      'title' => 'Debug',
      'description' => 'Log results of views periodically to watchdog.',
      'access arguments' => array('administer site configuration'),
      'page callback' => 'views_statslog_devel',
      'type' => MENU_LOCAL_TASK,
      'weight' => 1,
    );
  }

  return $items;
}

/**
 * Output statslog data for development and testing.
 */
function views_statslog_devel() {
  return kprint_r(views_statslog_events(variable_get('views_statslog_enabled', array())), TRUE);
}

/**
 * Generate the list of statslog events.
 */
function views_statslog_events($enabled_views) {
  $events = array();

  // Switch user account to root to bypass field access.
  global $user;
  $original_user = $user;
  $old_state = drupal_save_session();
  drupal_save_session(FALSE);
  $user = user_load(1);

  foreach ($enabled_views as $enabled) {
    if (!$enabled) {
      continue;
    }
    list($vid, $did) = explode(':', $enabled);
    $view = views_get_view($vid);

    // Robustness: If the view got deleted for whatever reason skip it to
    // prevent fatal errors.
    if (!$view) {
      continue;
    }
    $view->set_display($did);
    $view->pre_execute();
    $view->execute();

    // Store all value fields and their corresponding aggregation function.
    $value_fields = array();
    // Store all label fields and their corresponding labels.
    $label_fields = array();

    // Everything that has an aggregation function other than "group" is a
    // value field.
    foreach ($view->field as $name => $field) {
      $opts = $field->options;
      if ($opts['group_type'] == 'group') {
        $label_fields[$name] = $opts['label'] ? $opts['label'] : $name;
      }
      else {
        $value_fields[$name] = $opts['group_type'];
      }
    }

    foreach ($view->result as $index => $row) {
      $event = array();
      foreach ($label_fields as $name => $label) {
        $event[$label] = strip_tags($view->render_field($name, $index));
      }
      foreach ($value_fields as $name => $aggregation) {
        $alias = $view->field[$name]->field_alias != 'unknown' ? $view->field[$name]->field_alias : $name;
        $events[] = $event + array(
            'statslog_index' => 'snapshot-' . preg_replace('/^(.*?statslog_)/', '', $vid) . '-' . $did,
            'statslog_snapshot_field' => $alias,
            'statslog_value' => $row->{$alias},
        );
      }
    }
  }

  // Switch back to original user.
  $user = $original_user;
  drupal_save_session($old_state);

  return $events;
}

function _views_statslog_widget($default) {
  $widget = array(
    '#type' => 'checkboxes',
    '#title' => t('Enabled views'),
    '#description' => t('Enabled views will be calculated on every cron run and the result rows will be logged as JSON dumps.'),
    '#default_value' => $default,
    '#options' => array(),
  );

  $options = &$widget['#options'];

  foreach (views_get_all_views() as $vid => $view) {
    foreach ($view->display as $did => $display) {
      // Don't use the default view if there are multiple displays.
      if ($did == 'default' && count($view->display) > 1) {
        continue;
      }
      // If display doesn't use aggregation, skip it.
      $aggregation = 0;
      if (isset($view->display['default']->display_options['group_by'])) {
        $aggregation = $view->display['default']->display_options['group_by'];
      }
      if (isset($display->display_options['group_by'])) {
        $aggregation = $display->display_options['group_by'];
      }
      if (!$aggregation) {
        continue;
      }
      $options[$vid . ':' . $did] = $view->human_name . ': ' . $display->display_title;
    }
  }
  return $widget;
}

function _views_statslog_options() {
}
